#+TITLE: Emacs configuration
#+AUTHOR: Tom Hartman
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle ./init-test.el

* General Setup
** Preamble
This section contains the license and commentary for this elisp file. This both makes my elisp linter happy and also makes me happy. Or at least makes me feel like a responsible programmer.

*** License and Information
This configuration uses the GPL v2 license.

#+begin_src emacs-lisp
;;; init.el --- Emacs configuration and initialization file

;; Copyright (c) 2020 Thomas Hartman (thomas.lees.hartman@gmail.com)

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 2
;; of the License, or the License, or (at your option) any later
;; version.

;; This program is distributed in the hope that it will be useful
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
#+end_src


*** Commentary
#+begin_src emacs-lisp
;;; Commentary:
;; This is my Emacs configuration file.There are many like it but this one is mine.
;;
;; There is a lot of code in here that was lifted or modified from
;; other sources.Below is a non-exhaustive list of them:
;;
;; System Crafters Emacs from Scratch: https://github.com/daviwil/emacs-from-scratch
;;

;;
#+end_src


*** And the Code Begins... Nowowowowoowowowowow
#+begin_src emacs-lisp
;;; Code:
#+end_src

** Bars
 Remove the menu, scroll, and toolbar. Remove the basic line number
 mode as well.

 #+begin_src emacs-lisp output

 (menu-bar-mode -1)
 (scroll-bar-mode -1)
 (tool-bar-mode -1)

 #+end_src

** Line Numbers
#+begin_src emacs-lisp

;; Set up the visible bell
(setq visible-bell t)

(column-number-mode)
(global-display-line-numbers-mode t)

;; Set frame transparency
;;(set-frame-parameter (selected-frame) 'alpha efs/frame-transparency)
;;(add-to-list 'default-frame-alist `(alpha . ,efs/frame-transparency))
;;(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
;;(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Frist Buffer

Go directly to scratch buffer, do not pass go
#+begin_src emacs-lisp output

(setq startup-screen-inhibit-startup-screen t)

#+end_src

** Package Setup
Initialize the package repositories. Org mode in mainline emacs can be behind the stable development curve so add that in, in addition to melpa.

Setup the use-package package as well for ease of package management and configuration

   #+begin_src emacs-lisp
     ;; Initialize package sources
     (require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("nongnu" . "https://elpa.nongnu.org/nongnu/")
			 ("elpa" . "https://elpa.gnu.org/packages/")
;;			 ("org" . "https://orgmode.org/elpa/")
			 ))

     (package-initialize)
     (unless package-archive-contents
       (package-refresh-contents))

     ;; Initialize use-package on non-Linux platforms
     (unless (package-installed-p 'use-package)
       (package-install 'use-package))

     (require 'use-package)
     (setq use-package-always-ensure t)

     (use-package auto-package-update
	:ensure t
	:config
	(setq auto-package-update-delete-old-versions t
	      auto-package-update-interval 4)
	(auto-package-update-maybe))

   #+end_src

** Constants
#+begin_src emacs-lisp
(defvar *full-name* "Tom Hartman")
(defvar *email* "thomas.lees.hartman@gmail.com")

#+end_src

* Utilities

** Comment lines
#+begin_src emacs-lisp
(defun tlh/comment-lines (str beg end line-width)
  "Return a commented version of STR using BEG, END and LINE-WIDTH."
  (let ((lines (split-string str "\n")))
    (mapconcat #'(lambda (line)
                   (concat beg " " str (make-string (- line-width
                                                       (length str)
                                                       (+ (length beg) 1)
                                                       (length end)) ? )
                           end)) lines "\n")))

#+end_src

** Dash

For whatever reason a number of packages require dash but don't actually pull it down

#+begin_src emacs-lisp
;;(use-package dash)
#+end_src

* Appearance
This section configures the overall apparance of emacs from fonts to themes, transpancy and other visual nicities.

** Font
Setup SauceCodePro from Nerd Font as the default font for buffers.

#+begin_src emacs-lisp

(add-to-list 'default-frame-alist '(font . "SauceCodePro Nerd Font Mono-8"))

#+end_src

** Theme
From the doom themes package use the doom-moonlight theme

#+begin_src emacs-lisp

;;(use-package doom-themes
;;  :init (load-theme 'doom-sourcerer t))
(use-package doom-themes
  :init (load-theme 'doom-acario-dark t))

#+end_src

** Transparency
A quick function to set the transparency of emacs when in window mode. I've found 80% to be the most comfortable.

#+begin_src emacs-lisp
(defun set-transparency (value)
  "Set the transparency `VALUE' of the frame window 0=transparent/100=opaque."
  (interactive "nTransparency Value 0 - 100: ")
  ;(set-frame-parameter (selected-frame) 'alpha value)
  (set-frame-parameter nil 'alpha-background value))

;; Transparency needs to be set when a frame is created for cases where we are using emacsclient instead of a new instance
(defun new-frame-setup (frame)
  (when frame
    (select-frame frame))
  (when (display-graphic-p frame)
      (set-transparency 75)))

;; Run for already-existing frames
;(mapc 'new-frame-setup (frame-list))

;; Run when a new frame is created
;;(add-hook 'before-make-frame-functions 'new-frame-setup)
;;(add-hook 'server-after-make-frame-hook 'new-frame-setup)
#+end_src

** Mixed Pitch
By default org mode is set to use variable pitch mode with tables using fixed pitch but this doesn't quite work as advertise. Mixed pitch mode resolves this issue. Setup is pretty straight forward just add a hook  for org-mode to enable mixed-pitch-mode.

To enable for all text modes add a hook for text-mode.

#+begin_src emacs-lisp
(use-package mixed-pitch
  :hook (org-mode . mixed-pitch-mode))
#+end_src

** All Icon Mode
#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :config
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+end_src

** Mode Line
Updating the mode line for more awesome. Currently playing around with telephone line.

#+begin_src emacs-lisp
(use-package telephone-line
  :custom
  (telephone-line-primary-left-separator 'telephone-line-cubed-left)
  (telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left)
  (telephone-line-primary-right-separator 'telephone-line-cubed-right)
  (telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)
  (telephone-line-height 16)
  (telephone-line-mode 1))
#+end_src

** Highlight Parenthesis

#+begin_src emacs-lisp
(use-package paren
  :config
  (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
  (show-paren-mode 1))
#+end_src


** Highlight Indent
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :init
  (setq highlight-indent-guides-method 'character
        highlight-indent-guides-suppress-auto-error t)
  (set-face-foreground 'highlight-indent-guides-character-face "#222222")
  :config
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  (add-hook 'yaml-mode-hook 'highlight-indent-guides-mode))
#+end_src
* UI Improvements
** Multiple Cursors
Initialize multiple cursors mode

#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t)
#+end_src

** Which-key

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))
#+end_src

* Custom/Global Keybindings
** Calc
Bind turning the calc mode on and off using C-c =

#+begin_src emacs-lisp
(global-set-key (kbd "C-c =") 'calc)
#+end_src
* Editing Configuration
General configuration for editing within buffers

** Tabs

Default tab-widths to 2, and by default use spaces instead of tabs
#+begin_src emacs-lisp
(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)
#+end_src

** Cleaning Whitespaces

Use the ws-butler package to clear buffers of unnecessary white spaces

#+begin_src emacs-lisp
(use-package ws-butler
  :hook ((text-mode . ws-butler-mode)
         (prog-mode . ws-butler-mode)))
#+end_src

** Auto Revert
Make sure that emacs always reverts buffers after they have been changed on disk. This is helpful when doing things like switching between branches in git.

#+begin_src emacs-lisp
(setq global-auto-revert-non-file-buffers t)
(global-auto-revert-mode 1)
#+end_src

** Organizing emacs transient files

Emacs can make a bit of a mess with temporary files and lock files and other things. This can be a bit of a pain in terms of git repositories where there is a lot of cruff lying around that gets tracked that doesn't need to be.

#+begin_src emacs-lisp

;; no littering package handles a lot of emacs temp file mainenance in a nice way
(use-package no-littering)

;; keep customizations out of the init file
;;(setq custom-file
;;      (if (boundp 'server-socket-dir)
;;          (expand-file-name "custom.el" server-socket-dir)
;;        (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
;;(load custom-file t)
#+end_src
* Dired
Found this dired configuration changes over on the [[explog.in/dot/emacs/config.html][A literate emacs configuration]]. It removes permissions and other details from the dired view which makes the buffer look a lot less noisy.

#+begin_src emacs-lisp
(add-hook 'dired-mode-hook
	  (lambda ()
	    (dired-hide-details-mode 1)
	    (display-line-numbers-mode 0)))
#+end_src

* Spell Checking
Use fly-spell to spell check certain types of buffers
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'turn-on-flyspell)
#+end_src

* Org Mode
** General
General setup for org mode files, some of this is to enhance
readability as well as associate certain minor modes and other
constants.

Additionally I prefer my org files to starup collapse for easier navigation.

#+begin_src emacs-lisp

(defun efs/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))

(use-package org
;;  :pin org
  :hook (org-mode . efs/org-mode-setup)
  :ensure org-contrib
  :bind ()
  :custom
  ;; Right justifies tags on headers adjusting for a default line width of 80
  (org-tags-column -80)
  (org-agenda-tags-column -80)
  :config
  (auto-fill-mode)
  (setq org-startup-folded "fold")
  (setq org-ellipsis " ▾")
  (setq org-return-follows-link t)
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  ;; Prevent org-agenda from creating or clobbering frames
  (setf org-agenda-window-setup 'other-window)

  ;; Refile targets
  (setq org-refile-targets
        '(("~/notes/globals/punchlist.org" :maxlevel . 1)))
  )
#+end_src

** Babel
Setup babel source code blocks. Right now this is configured for shell and emacs-lisp.

The final line prevents org src code from altering the windowing within emacs. I borrows and existing window rather than doing a 50/50 split between the org target buffer and the source, which is super annoying.

#+begin_src emacs-lisp
(setf org-src-preserve-indentation t)

(org-babel-do-load-languages 'org-babel-load-languages
			     '((shell . t)
			       (emacs-lisp . t)
             (R . t)))
;             (yaml . t)))
(setf org-auto-load-images t)
(setf org-src-window-setup 'other-window)
#+end_src

** Structure Templates

 #+begin_src emacs-lisp

 (require 'org-tempo)

 (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
 (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
 (add-to-list 'org-structure-template-alist '("py" . "src python"))
 (add-to-list 'org-structure-template-alist '("lu" . "src lua"))
 (add-to-list 'org-structure-template-alist '("yml" . "src yaml :tangle main.yml"))
 #+end_src

** Auto-tangle

This snippet adds a hook to org-mode buffers so that efs/org-babel-tangle-config gets executed each time such a buffer gets saved. This function checks to see if the file being saved is the Emacs.org file you’re looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp
;; Automatically tangle our Emacs.org config file when we save it
(defun efs/org-babel-tangle-config ()
  (when (string-equal (file-name-directory (buffer-file-name))
                      (expand-file-name user-emacs-directory))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

** Center Org Buffers

We use visual-fill-column to center org-mode buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document. This is really a matter of personal preference so you can remove the block below if you don’t like the behavior.

#+begin_src emacs-lisp
(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))
#+end_src

** Better Bullets
org-bullets replaces the heading stars in org-mode buffers with nicer looking characters that you can control. Another option for this is org-superstar-mode which we may cover in a later video.

#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
** Org Agenda

Setup some default bindings as well as the location of agenda files. The final line is a configuration change similar to the one made for org-babel. By default opening an agenda buffer reorganizes the windows and frames so that only the current buffer and the new agenda buffer are presented in a 50/50 window split. This is super annoying.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)

(setf org-agenda-window-setup 'other-window)

(setq org-agenda-custom-commands
      '(("d" "Default view of scheduled items and todos"
         ((agenda "")
          (tags-todo "Punchlist"
                     ((org-agenda-overriding-header "Punchlist")))
          (tags-todo "*"
                     ((org-agenda-overriding-header "All of the things")))
          ))))
#+end_src

** Resume
Setup some conviencing functions and bindings for resume org files.
#+begin_src emacs-lisp
(defun org-export-as-pdf-and-open ()
  (interactive)
  (save-buffer)
  (org-open-file (org-latex-export-to-pdf)))

(add-hook
 'org-mode-hook
 (lambda()
   (define-key org-mode-map
       (kbd "<f5>") 'org-export-as-pdf-and-open)))
#+end_src

** LaTeX Pdf Process
Need to add the -shell-escape option to the pdflatex process in order for svg files to be processed by inkscape

#+begin_src emacs-lisp
(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	"bibtex %b"
	"pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	"pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src

** org-roam
Setup org-roam note taking and file management. After loading the package, you can check the variable `org-roam--sqlite-available-p' to verify that the sqlite database is available.

#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/notes")
  (org-agenda-files '("~/notes/journal"
		      "~/notes/globals/"))
  (org-roam-dailies-directory "journal/")
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates
   '(("d" "default" plain
      "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S$>-${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)
     ("h" "house project" plain
      (file "~/.emacs.d/org-templates/house-project.org")
      :if-new (file+head "%<%Y%m%d%H%M%S$>-${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)
     ("r" "recipe" plain
      (file "~/.emacs.d/org-templates/recipe.org")
      :if-new (file+head "%<%Y%m%d%H%M%S$>-${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)))
  :bind  (("C-c n l" . org-roam-buffer-toggle)
	  ("C-c n f" . org-roam-node-find)
	  ("C-c n i" . org-roam-node-insert)
	  :map org-mode-map
	  ("C-M-i"   . completion-at-point)
	  :map org-roam-dailies-map
	  ("Y" . org-roam-dailies-capture-yesterday)
	  ("T" . org-roam-dailies-capture-tomorrow))
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
  :config
  (require 'org-roam-dailies)
  (org-roam-db-autosync-mode))
#+end_src

In order to keep my laptop and desktop in sync with one another in terms of roam notes all saves in a notes file will trigger an automatic git commit. Load the git-auto-commit-mode package to facilitate this.

#+begin_src emacs-lisp
(use-package git-auto-commit-mode)
#+end_src

** org-capture
Customizations to org mode capture templates
#+begin_src emacs-lisp
(use-package org-capture
  :ensure nil
  :after org
  :custom
  (org-capture-templates
   `(("p" "Punchlist Item" entry
      (file+headline "~/notes/globals/punchlist.org" "Punch list"),
      "* TODO %? %^G\n %i")
     ("e" "Event" entry
      (file+headline "~/notes/globals/calendar.org" "Events"),
      "* %? %^G\nSCHEDULED: %^t\n %i")
     ("w" "Whereabouts" entry
      (file+headline "~/notes/globals/calendar.org" "Whereabouts")
      "* %? \n SCHEDULED: %^t\n %i")
     ("a" "Appointment" entry
      (file+headline "~/notes/globals/calendar.org" "Appointments")
      "* %? %^G\n SCHEDULED: %^t\n %i")
     ;(("P" "Project"))
     )))
#+end_src

** org-make-toc
Github can use org mode as readme files but doesn't automatically insert a table of contents like it does for normal exporting. Include the org-make-toc package to supplement org readme files being used in github.
#+begin_src emacs-lisp
(use-package org-make-toc)
#+end_src
* Ivy and Counsel
#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package counsel
  :bind (("C-M-j" . 'counsel-switch-buffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (counsel-mode 1))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

#+end_src

* Magit
#+begin_src emacs-lisp
(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

;; NOTE: Make sure to configure a GitHub token before using this package!
;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
(use-package forge)

#+end_src

* Programming
** Flycheck
Flycheck mode for syntax highlighting and linting
#+begin_src emacs-lisp

(use-package flycheck)

#+end_src

** Language Server Protocol
Basic LSP setup

#+begin_src emacs-lisp

(defun efs/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . efs/lsp-mode-setup)
  :init
  (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
  :config
  (lsp-enable-which-key-integration t))

#+end_src

LSP-UI
#+begin_src emacs-lisp
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))
#+end_src

LSP-treemacs
#+begin_src emacs-lisp
(use-package lsp-treemacs
  :after lsp)
#+end_src

** DAP
#+begin_src emacs-lisp
(use-package dap-mode
  :custom
  (bind-keys :prefix "C-c d" :prefix-map debug-keymap
             ("t" . dap-breakpoint-toggle)
             ("n" . dap-next)
             ("s" . dap-step-in)
             ("S" . dap-step-out)
             ("c" . dap-continue)
             ("r" . dap-restart)
             ("R" . dap-ui-repl)
             ("d" . dap-debug)))

  ;; Uncomment the config below if you want all UI panes to be hidden by default!
  ;; :custom
  ;; (lsp-enable-dap-auto-configure nil)
  ;; :config
  ;; (dap-ui-mode 1)

  ;;:config
  ;; Set up Node debugging
  ;;(require 'dap-node)
  ;;(dap-node-setup) ;; Automatically installs Node debug adapter if needed

  ;; Bind `C-c l d` to `dap-hydra` for easy access
  ;;(general-define-key
  ;;  :keymaps 'lsp-mode-map
  ;;  :prefix lsp-keymap-prefix
  ;;  "d" '(dap-hydra t :wk "debugger")))

#+end_src

** Company

Company Mode provides a nicer in-buffer completion interface than completion-at-point which is more reminiscent of what you would expect from an IDE. We add a simple configuration to make the keybindings a little more useful (TAB now completes the selection and initiates completion at the current location if needed).

We also use company-box to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))

#+end_src

** Projectile

#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/projects/")
    (setq projectile-project-search-path '("~/projects/")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src

** Languages
*** Emacs Lisp

Paredit mode

#+begin_src emacs-lisp
(use-package paredit
  :config

  ;; slurping in a terminal doesn't quite work, so rebind keys so they do
  (unless (display-graphic-p)
    (define-key paredit-mode-map (kbd ",") 'paredit-backward-slurp-sexp)
    (define-key paredit-mode-map (kbd ".") 'paredit-forward-slurp-sexp))

  ;; turn paredit on for all lispy modes
  (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
  (add-hook 'lisp-mode-hook 'paredit-mode)
  (add-hook 'scheme-mode-hook 'paredit-mode)
  ;(add-hook 'ielm-mode-hook 'paredit-mode)

  ;; turn on paredit for Cask files too
  (add-to-list 'auto-mode-alist '("Cask" . paredit-mode)))
#+end_src

*** TypeScript
Setup Typescript to use lsp

#+begin_src emacs-lisp
(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2)
  (add-to-list 'lsp-enabled-clients 'ts-ls))
#+end_src

*** Javascript
#+begin_src emacs-lisp
(use-package js2-mode
  :mode "\\.js\\'"
  :hook (js2-mode . lsp-deferred)
  :config
  (setq tab-width 2)
  (add-to-list 'lsp-enabled-clients 'jsts-ls))
#+end_src

*** JSON
Setup json lsp
#+begin_src emacs-lisp
(use-package json-mode
  :hook (json-mode . lsp-deferred)
  :config
  (add-to-list 'lsp-enabled-clients 'json-ls)
  (setq js-indent-level 2)
  (setq tab-width 2))
#+end_src
*** Python

In order to not clutter the system python userspace, packages for application development are stored in virtual environments as part of the application itself. This includes both application, testing, and development dependencies. In order to properly interact with python within emacs Pyvenv can be used to set the current python environment which will be passed to any subsequent python relates commands (lsp, REPL, etc)

#+begin_src emacs-lisp
(use-package pyvenv
  :config
  (pyvenv-mode 1))
#+end_src

Install the python language server into the virtual environment
#+begin_src shell
source venv/bin/activate
pip install 'python-lsp-server[all]'
#+end_src

As stated above the lsp server is installed in the virtual environments on a per project basis. If the environment has not been enabled in the current emacs session, query the user for the python environment before starting lsp.

#+begin_src emacs-lisp
(defun tlh/enable-lsp-on-pyvenv ()
  "Enable lsp mode after pyvenv activation"
  (when (null (getenv "VIRTUAL_ENV"))
    (call-interactively 'pyvenv-activate))
  (lsp-deferred))

(use-package python-mode
  :ensure t
  :hook ((python-mode . tlh/enable-lsp-on-pyvenv)
         (flycheck-mode . (lambda ()
                            (flycheck-add-next-checker 'lsp 'python-flake8))))
  :config
  (add-to-list 'lsp-enabled-clients 'pylsp)
  :custom
  (lsp-pylsp-plugins-pylint-enabled t)
  ;;(dap-python-debugger 'debugpy)
  :config
  (require 'dap-python)
  (require 'lsp-pylsp))
#+end_src

Install pytest mode

#+begin_src
(use-package python-pytest)
  (require 'dap-python)
  (require 'pylsp))
#+end_src

Setup pytest package to make using pytest runners a bit easier
#+begin_src emacs-lisp
(use-package pytest
  :bind (:map python-mode-map
              ("C-c C-t a" . pytest-all)
              ("C-c C-t m" . pytest-module)
              ("C-c C-t ." . pytest-one)
              ("C-c C-t c" . pytest-again)
              ("C-c C-t d" . pytest-directory)
              ("C-c C-t pa" . pytest-pdb-all)
              ("C-c C-t m" . pytest-pdb-module)
              ("C-c C-t p." . pytest-pdb-one)))
#+end_src

*** Open Scad
Initialize open scad mode
#+begin_src emacs-lisp
(use-package scad-preview
  :mode "\\.scad\\'"
  :custom
  (scad-preview-image-size '(900 . 900))
  :config
  (defun scad-export-stl ()
    "Exports the current visited filename as an stl file."
    (interactive)
    (call-process "openscad" nil "*openscad-output*" t
                  "-o" (f-swap-ext (f-filename (buffer-file-name)) "stl")
                  (buffer-file-name))))
#+end_src

*** Lisp
**** Slime
#+begin_src
(use-package slime
  :custom
  (inferior-lisp-program "/usr/bin/sbcl")
  :config
  (add-hook 'lisp-mode-hook '(lambda () (slime-mode)))
  (slime-setup '(slime-repl slime-fuzzy)))
#+end_src

*** Lua

Setup Lua the way I like it
#+begin_src emacs-lisp

(use-package lua-mode
  :hook (lua-mode . lsp-deferred)
  :config
  (add-to-list 'lsp-enabled-clients 'lsp-lua-lsp)
  (setf lsp-clients-lua-lsp-server-install-dir "~/.luarocks/bin/lua-lsp"))

#+end_src

**** Lua Language Server
Installation

#+begin_src sh
# clone project
git clone https://github.com/sumneko/lua-language-server
cd lua-language-server
git submodule update --init --recursive

cd 3rd/luamake
ninja -f ninja/linux.ninja
cd ../..
./3rd/luamake/luamake rebuild

mkdir -P ~/.emacs.d/.cache/lsp/lua-language-server/

cp bin/Linux/lua-language-server ~/.emacs.d/.cache/lsp/lua-language-server/
cp main.lua ~/.emacs.d/.cache/lsp/lua-language-server/
#+end_src

*** HTML
Add emmet mode to html mode
#+begin_src emacs-lisp
(use-package emmet-mode
  :hook (mhtml-mode . emmet-mode))
#+end_src

*** YAML
Setup yaml support
#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src

*** SCSS
#+begin_src emacs-lisp
;;(lsp-install-server 'css-ls)

(use-package scss-mode
  :mode "\\.scss'"
  :hook (scss-mode . lsp-deferred)
  :config
  (setq scss-indent-level 2)
  (add-to-list 'lsp-enabled-clients 'css-ls))
#+end_src
** Origami
Origami folding library
#+begin_src emacs-lisp
(use-package origami
  :config
  (global-origami-mode))
#+end_src

** Terraform

Terraform files use a variant of json format. Fortunately there is a major mode for that so lets install that.

#+begin_src emacs-lisp
(use-package terraform-mode
  :mode "\\.tf\\'")

#+end_src
** HCL2

Terraform and other HashiCorp tools use HCL v2 as their configuration language. Install hcl-mode to support the languages.

#+begin_src emacs-lisp
(use-package hcl-mode
  :mode "\\.tf\\'")
#+end_src

* Skelator
Install skelator

#+begin_src emacs-lisp
(use-package skeletor)
#+end_src
* Docker
** Docker File Mode
#+begin_src emacs-lisp
(use-package dockerfile-mode)
#+end_src

** Docker Compose
#+begin_src emacs-lisp
(use-package docker-compose-mode
  :bind ("C-c D" . docker-compose))
#+end_src

** Docker Management
#+begin_src emacs-lisp
(use-package docker
  :ensure t
  :bind ("C-c d" . docker))
#+end_src

* Kubernetes
Install the kubernetes package and do some basic setup

#+begin_src emacs-lisp
(use-package kubernetes
  :ensure t
  :commands (kubernetes-overview)
  :config
  (setq kubernetes-poll-frequency 3600
        kubernetes-redraw-frequency 3600))
#+end_src

* Smartparens
Turn on smart parens mode for all programming modes. Exclude single quote parings for lisp modes because single quotes have different meaning in those languages.

#+begin_src emacs-lisp
(use-package smartparens
  :config
  (add-hook 'prog-mode-hook 'turn-on-smartparens-mode)
  (sp-local-pair '(emacs-lisp-mode lisp-mode) "'" "'" :actions nil))
#+end_src
* Treemacs
Default setup for treemacs
Disabling for the moment
#+begin_src emacs-lisp
(use-package treemacs
  )
#+end_src

* yassnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :custom
  (yas/root-directory '("~/.emacs.d/snippets"))
  :config
  (yas-global-mode 1)
  (mapc #'yas-load-directory yas/root-directory))

#+end_src

* RestClient
#+begin_src emacs-lisp
(use-package restclient)
#+end_src

* Dashboard
Turning this off for the moment

#+begin_src
(use-package dashboard
  :demand
  :init
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
  (setq dashboard-center-content t)
  (setq dashboard-projects-backend 'projectile)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (defun lc/is-after-17-or-weekends? ()
    (or (thread-first (nth 3 (split-string (current-time-string) " ")) ;; time of the day e.g. 18
            ;; (substring 0 2)
            (string-to-number)   ;;<
            (> 16))
        (thread-first (substring (current-time-string) 0 3) ;; day of the week e.g. Fri
            (member  '("Sat" "Sun")))))
  (setq dashboard-banner-logo-title nil)
  (setq dashboard-set-footer nil)
  (setq dashboard-set-navigator t)
  (setq dashboard-navigator-buttons
        `((;; Github
           (,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
            "Github"
            "Go to wondercast"
            (lambda (&rest _) (browse-url "https://github.com/thartman83")))
           ;; Perspectives
           (,(all-the-icons-octicon "history" :height 1.1 :v-adjust 0.0)
            "Restore"
            "Restore"
            (lambda (&rest _) (persp-state-load persp-state-default-file)))
           )))
  (defun lc/dashboard-agenda-entry-format ()
    "Format agenda entry to show it on dashboard. Compared to the original, we remove tags at the end"
    (let* ((schedule-time (org-get-scheduled-time (point)))
           (deadline-time (org-get-deadline-time (point)))
           (item (org-agenda-format-item
                  (dashboard-agenda-entry-time (or schedule-time deadline-time))
                  (org-get-heading)
                  (org-outline-level)
                  (org-get-category)
                  nil;; (org-get-tags)
                  t))
           (loc (point))
           (file (buffer-file-name)))
      (dashboard-agenda--set-agenda-headline-face item)
      (list item loc file)))
  (defun lc/dashboard-get-agenda ()
    "Get agenda items for today or for a week from now."
    (org-compile-prefix-format 'agenda)
    (org-map-entries 'lc/dashboard-agenda-entry-format
                     dashboard-match-agenda-entry
                     'agenda
                     dashboard-filter-agenda-entry))
  (defun lc/dashboard-get-next ()
    "Get agenda items for today or for a week from now."
    (org-compile-prefix-format 'agenda)
    (org-map-entries 'lc/dashboard-agenda-entry-format
                     dashboard-match-next-entry
                     'agenda))
  (defun lc/dashboard-insert-next (list-size)
    "Add the list of LIST-SIZE items of next tasks"
    (require 'org-agenda)
    (let ((next (lc/dashboard-get-next)))
      (dashboard-insert-section
       "Next tasks"
       next
       list-size
       "n"
       `(lambda (&rest ignore)
          (let ((buffer (find-file-other-window (nth 2 ',el))))
            (with-current-buffer buffer
              (goto-char (nth 1 ',el))
              (switch-to-buffer buffer))))
       (format "%s" (nth 0 el)))))
  :config
  ;; exclude work items after 17 and on weekends
  (setq dashboard-match-next-entry "TODO=\"NEXT\"-work")
  (run-at-time "00:00" (* 60 60 24)
               (lambda ()
                 (if (lc/is-after-17-or-weekends?)
                     (setq dashboard-match-agenda-entry "life|habits"
                           dashboard-match-next-entry "TODO=\"NEXT\"-work")
                   (setq dashboard-match-agenda-entry "work|life|habits"
                         dashboard-match-next-entry "TODO=\"NEXT\""
                         ))))
  (dashboard-setup-startup-hook)
;;  (set-face-attribute 'dashboard-items-face nil :height (lc/get-font-size))
  ;; do not show tags in agenda view
  (advice-add 'dashboard-get-agenda :override #'lc/dashboard-get-agenda)
  ;; show next tasks in dashboard
  (add-to-list 'dashboard-item-generators  '(next . lc/dashboard-insert-next))
  (setq dashboard-items '((agenda . 5)
                          (next . 10)
                          ;; (bookmarks . 5)
                          ;; (recents  . 5)
                          (projects . 5))))
#+end_src

* Customization
Customization's to emacs. Emacs adds these based on some user interaction so they need to be added into the org file so they persist after another tangle.

#+begin_src emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(safe-local-variable-values
   '((gac-automatically-push-p . t)
     (gac-automatically-add-new-files-p . t))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+end_src

* Closing

#+begin_src emacs-lisp
;;; init.el ends here
#+end_src
